/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.stcos.server.controller.api;

import com.stcos.server.model.dto.LoginParamDto;
import com.stcos.server.model.dto.RegisterParamDto;
import com.stcos.server.model.dto.TokenDto;
import com.stcos.server.util.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-11T20:37:40.615842300+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "authentication", description = "the authentication API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth/login : 用户登录
     * 登录成功返回 token
     *
     * @param loginParamDto 用户名、密码 (required)
     * @param userType 进行登录的用户类型：admin、operator、client. (optional)
     * @return 登录成功 (status code 200)
     *         or 用户不存在 (status code 404)
     *         or 用户名或密码错误 (status code 401)
     *         or 账号禁用 (status code 403)
     */
    @Operation(
        operationId = "login",
        summary = "用户登录",
        description = "登录成功返回 token",
        tags = { "authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "登录成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TokenDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "用户不存在"),
            @ApiResponse(responseCode = "401", description = "用户名或密码错误"),
            @ApiResponse(responseCode = "403", description = "账号禁用")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TokenDto> login(
        @Parameter(name = "LoginParamDto", description = "用户名、密码", required = true) @Valid @RequestBody LoginParamDto loginParamDto,
        @Parameter(name = "user-type", description = "进行登录的用户类型：admin、operator、client.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "user-type", required = false) String userType
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tokenHead\" : \"tokenHead\", \"tokenStr\" : \"tokenStr\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/logout : 用户注销
     * 注销登录
     *
     * @return 注销成功 (status code 200)
     */
    @Operation(
        operationId = "logout",
        summary = "用户注销",
        description = "注销登录",
        tags = { "authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "注销成功")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/logout"
    )
    default ResponseEntity<Void> logout(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/register : 用户注册
     * 注册新用户
     *
     * @param registerParamDto 用户注册所必需的信息 (required)
     * @return 注册成功 (status code 200)
     *         or 用户名已存在 (status code 409)
     */
    @Operation(
        operationId = "register",
        summary = "用户注册",
        description = "注册新用户",
        tags = { "authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "注册成功"),
            @ApiResponse(responseCode = "409", description = "用户名已存在")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/register",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> register(
        @Parameter(name = "RegisterParamDto", description = "用户注册所必需的信息", required = true) @Valid @RequestBody RegisterParamDto registerParamDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
