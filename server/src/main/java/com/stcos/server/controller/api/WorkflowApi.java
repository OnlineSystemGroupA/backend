/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.stcos.server.controller.api;

import com.stcos.server.entity.dto.FileIndexDto;
import com.stcos.server.entity.dto.FormMetadataDto;
import com.stcos.server.entity.dto.ProcessDto;
import com.stcos.server.entity.dto.ProcessIdDto;
import com.stcos.server.util.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-21T21:36:55.308582200+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "workflow", description = "the workflow API")
public interface WorkflowApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /workflow/processes/{processId}/tasks/{taskId}/complete : 完成任务
     * 将指定任务设置为已完成，并跳转至下一阶段
     *
     * @param processId 待完成任务所属的流程实例 Id (required)
     * @param taskId 待完成的任务 Id (required)
     * @param passable 是否通过，流程遇到网关用于决定运行方向 (optional)
     * @return 成功完成指定任务 (status code 200)
     *         or 指定任务对该用户不可见或当前用户无完成任务权限 (status code 403)
     *         or 指定任务或流程不存在 (status code 404)
     */
    @Operation(
        operationId = "completeTask",
        summary = "完成任务",
        description = "将指定任务设置为已完成，并跳转至下一阶段",
        tags = { "workflow" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功完成指定任务"),
            @ApiResponse(responseCode = "403", description = "指定任务对该用户不可见或当前用户无完成任务权限"),
            @ApiResponse(responseCode = "404", description = "指定任务或流程不存在")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/workflow/processes/{processId}/tasks/{taskId}/complete"
    )
    default ResponseEntity<Void> completeTask(
        @Parameter(name = "processId", description = "待完成任务所属的流程实例 Id", required = true, in = ParameterIn.PATH) @PathVariable("processId") String processId,
        @Parameter(name = "taskId", description = "待完成的任务 Id", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId,
        @Parameter(name = "passable", description = "是否通过，流程遇到网关用于决定运行方向", in = ParameterIn.QUERY) @Valid @RequestParam(value = "passable", required = false) Boolean passable
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /workflow/processes/{processId}/sample : 所有样品下载
     * 获取指定任务中的指定资源
     *
     * @param processId 指定流程实例 id (required)
     * @return 成功获取指定资源 (status code 200)
     *         or 指定任务或资源对该用户不可见 (status code 403)
     *         or 指定任务或资源不存在 (status code 404)
     */
    @Operation(
            operationId = "downloadSample",
            summary = "所有样品下载",
            description = "获取指定任务中的指定资源",
            tags = { "workflow" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功获取指定资源", content = {
                            @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "指定任务或资源对该用户不可见"),
                    @ApiResponse(responseCode = "404", description = "指定任务或资源不存在")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/workflow/processes/{processId}/sample",
            produces = { "application/octet-stream" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> downloadSample(
            @Parameter(name = "processId", description = "指定流程实例 id", required = true, in = ParameterIn.PATH) @PathVariable("processId") String processId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /workflow/processes/{processId}/forms/{formName} : 获取表单
     * 获取表单
     *
     * @param processId 指定流程实例 id (required)
     * @param formName 期望获取的表单名称 (required)
     * @return 成功获取指定资源 (status code 200)
     *         or 指定流程或表单对该用户不可见 (status code 403)
     *         or 指定流程或表单不存在 (status code 404)
     */
    @Operation(
        operationId = "getForm",
        summary = "获取表单",
        description = "获取表单",
        tags = { "workflow" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取指定资源", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "指定流程或表单对该用户不可见"),
            @ApiResponse(responseCode = "404", description = "指定流程或表单不存在")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/workflow/processes/{processId}/forms/{formName}",
        produces = { "text/plain" }
    )
    default ResponseEntity<String> getForm(
        @Parameter(name = "processId", description = "指定流程实例 id", required = true, in = ParameterIn.PATH) @PathVariable("processId") String processId,
        @Parameter(name = "formName", description = "期望获取的表单名称", required = true, in = ParameterIn.PATH) @PathVariable("formName") String formName
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /workflow/processes/{processId}/forms : 获取表单
     * 获取表单
     *
     * @param processId 指定流程实例 id (required)
     * @return 成功获取可见表单列表 (status code 200)
     *         or 指定流程不存在 (status code 404)
     */
    @Operation(
        operationId = "getFormIndex",
        summary = "获取表单",
        description = "获取表单",
        tags = { "workflow" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取可见表单列表", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FormMetadataDto.class)))
            }),
            @ApiResponse(responseCode = "404", description = "指定流程不存在")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/workflow/processes/{processId}/forms",
        produces = { "application/json" }
    )
    default ResponseEntity<List<FormMetadataDto>> getFormMetadata(
        @Parameter(name = "processId", description = "指定流程实例 id", required = true, in = ParameterIn.PATH) @PathVariable("processId") String processId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"formIndexId\" : 0, \"formName\" : \"formName\" }, { \"formIndexId\" : 0, \"formName\" : \"formName\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /workflow/processes/{processId}/details : 获取流程详情
     * 获取流程详情
     *
     * @param processId 流程实例 Id (required)
     * @return 成功获取指定流程的详细信息 (status code 200)
     *         or 指定流程对该用户不可见 (status code 403)
     *         or 指定流程不存在 (status code 404)
     */
    @Operation(
        operationId = "getProcessDetails",
        summary = "获取流程详情",
        description = "获取流程详情",
        tags = { "workflow" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取指定流程的详细信息"),
            @ApiResponse(responseCode = "403", description = "指定流程对该用户不可见"),
            @ApiResponse(responseCode = "404", description = "指定流程不存在")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/workflow/processes/{processId}/details"
    )
    default ResponseEntity<Void> getProcessDetails(
        @Parameter(name = "processId", description = "流程实例 Id", required = true, in = ParameterIn.PATH) @PathVariable("processId") String processId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /workflow/processes : 获取流程实例
     * 获取与当前用户相关的流程实例
     *
     * @return 成功获取流程实例列表 (status code 200)
     */
    @Operation(
        operationId = "getProcesses",
        summary = "获取流程实例",
        description = "获取与当前用户相关的流程实例",
        tags = { "workflow" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取流程实例列表", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProcessDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/workflow/processes",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ProcessDto>> getProcesses(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"processId\" : \"processId\", \"taskName\" : \"taskName\", \"assignee\" : \"assignee\", \"startUser\" : \"startUser\", \"taskId\" : \"taskId\", \"startDate\" : \"startDate\" }, { \"processId\" : \"processId\", \"taskName\" : \"taskName\", \"assignee\" : \"assignee\", \"startUser\" : \"startUser\", \"taskId\" : \"taskId\", \"startDate\" : \"startDate\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /workflow/processes/{processId}/forms/{formName} : 更新或创建表单
     * 更新或创建表单
     *
     * @param processId 指定流程实例 id (required)
     * @param formName 期望操作的表单名称 (required)
     * @param body  (optional)
     * @return 成功更新或创建表单 (status code 200)
     *         or 该流程实例对当前用户不可见或当前用户无修改权限 (status code 403)
     *         or 指定流程实例不存在 (status code 404)
     */
    @Operation(
            operationId = "putForm",
            summary = "更新或创建表单",
            description = "更新或创建表单",
            tags = { "workflow" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "成功更新或创建表单"),
                    @ApiResponse(responseCode = "403", description = "该流程实例对当前用户不可见或当前用户无修改权限"),
                    @ApiResponse(responseCode = "404", description = "指定流程实例不存在")
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/workflow/processes/{processId}/forms/{formName}",
            consumes = { "text/plain" }
    )
    default ResponseEntity<Void> putForm(
            @Parameter(name = "processId", description = "指定流程实例 id", required = true, in = ParameterIn.PATH) @PathVariable("processId") String processId,
            @Parameter(name = "formName", description = "期望操作的表单名称", required = true, in = ParameterIn.PATH) @PathVariable("formName") String formName,
            @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) String body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /workflow/start : 启动流程
     * 开启一个新的委托流程
     *
     * @return 启动成功 (status code 200)
     */
    @Operation(
        operationId = "startProcess",
        summary = "启动流程",
        description = "开启一个新的委托流程",
        tags = { "process" },
        responses = {
            @ApiResponse(responseCode = "200", description = "启动成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessIdDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/workflow/start",
        produces = { "application/json" }
    )
    default ResponseEntity<ProcessIdDto> startProcess(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"processId\" : \"processId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /workflow/processes/{processId}/sample : 上传样品
     * 上传与对应流程相关的样品文件
     *
     * @param processId 指定流程实例 id (required)
     * @param files  (optional)
     * @return 成功上传 (status code 201)
     *         or 没有上传文件 (status code 400)
     *         or 该任务对当前用户不可见或当前用户无修改权限，或文件校验不通过 (status code 403)
     *         or 指定任务不存在 (status code 404)
     *         or 上传文件失败 (status code 500)
     *         or 存储空间不足 (status code 507)
     */
    @Operation(
        operationId = "uploadSample",
        summary = "上传样品",
        description = "上传与对应流程相关的样品文件",
        tags = { "workflow" },
        responses = {
            @ApiResponse(responseCode = "201", description = "成功上传", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FileIndexDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "没有上传文件"),
            @ApiResponse(responseCode = "403", description = "该任务对当前用户不可见或当前用户无修改权限，或文件校验不通过"),
            @ApiResponse(responseCode = "404", description = "指定任务不存在"),
            @ApiResponse(responseCode = "500", description = "上传文件失败"),
            @ApiResponse(responseCode = "507", description = "存储空间不足")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/workflow/processes/{processId}/sample",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<List<FileIndexDto>> uploadSample(
        @Parameter(name = "processId", description = "指定流程实例 id", required = true, in = ParameterIn.PATH) @PathVariable("processId") String processId,
        @Parameter(name = "files", description = "") @RequestPart(value = "files", required = false) List<MultipartFile> files
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"fileIndexId\" : 0, \"fileName\" : \"fileName\", \"fileType\" : \"fileType\" }, { \"fileIndexId\" : 0, \"fileName\" : \"fileName\", \"fileType\" : \"fileType\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
