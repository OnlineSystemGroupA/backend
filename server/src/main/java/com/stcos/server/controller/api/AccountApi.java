/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.stcos.server.controller.api;

import com.stcos.server.entity.dto.ClientDetailsDto;
import com.stcos.server.entity.dto.OperatorDetailsDto;
import com.stcos.server.util.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-02T14:00:18.018979+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "account", description = "the account API")
public interface AccountApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /account/client_details : 获取个人信息
     * 获取当前登录账号的账号信息
     *
     * @return ok (status code 200)
     *         or 当前登录账号的类型不是 client (status code 409)
     */
    @Operation(
        operationId = "getClientDetails",
        summary = "获取个人信息",
        description = "获取当前登录账号的账号信息",
        responses = {
            @ApiResponse(responseCode = "200", description = "ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientDetailsDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "当前登录账号的类型不是 client")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/account/client_details",
        produces = { "application/json" }
    )
    default ResponseEntity<ClientDetailsDto> getClientDetails(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gender\" : \"gender\", \"realName\" : \"realName\", \"createdDate\" : \"createdDate\", \"companyEmail\" : \"companyEmail\", \"phone\" : \"phone\", \"companyPhone\" : \"companyPhone\", \"companyAddress\" : \"companyAddress\", \"companyFax\" : \"companyFax\", \"company\" : \"company\", \"companyWebsite\" : \"companyWebsite\", \"email\" : \"email\", \"username\" : \"username\", \"companyPostcode\" : \"companyPostcode\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /account/operators : 获取员工
     * 获取所在部门员工
     *
     * @return ok (status code 200)
     */
    @Operation(
            operationId = "getOperators",
            summary = "获取员工",
            description = "获取所在部门员工",
            responses = {
                    @ApiResponse(responseCode = "200", description = "ok", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = OperatorDetailsDto.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/account/operators",
            produces = { "application/json" }
    )
    default ResponseEntity<List<OperatorDetailsDto>> getOperators(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phone\" : \"phone\", \"real_name\" : \"real_name\", \"job_number\" : \"job_number\", \"position\" : \"position\", \"department\" : \"department\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * POST /account/client_details : 修改个人信息
     * 修改当前登录账户的个人信息
     *
     * @param clientDetailsDto 修改后的个人信息 (optional)
     * @return ok (status code 200)
     * or 当前登录账号的类型不是 client (status code 409)
     */
    @Operation(
        operationId = "updateClientDetails",
        summary = "修改个人信息",
        description = "修改当前登录账户的个人信息",
        responses = {
            @ApiResponse(responseCode = "200", description = "ok"),
            @ApiResponse(responseCode = "409", description = "当前登录账号的类型不是 client")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/account/client_details",
        consumes = { "application/json" }
    )
    default ResponseEntity<String> updateClientDetails(
        @Parameter(name = "ClientDetailsDto", description = "修改后的个人信息") @Valid @RequestBody(required = false) ClientDetailsDto clientDetailsDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
